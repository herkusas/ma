CREATE TABLE IF NOT EXISTS clients
(
    "id"                    integer                                             NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "client_id"             character varying(200) COLLATE pg_catalog."default" NOT NULL,
    "client_name"           character varying(200) COLLATE pg_catalog."default",
    "access_token_lifetime" integer                                             NOT NULL,
    "created"               timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    "updated"               timestamp without time zone,
    CONSTRAINT "primary_key_clients" PRIMARY KEY ("id")
);

CREATE UNIQUE INDEX IF NOT EXISTS "UI_clients_clients_id"
    ON clients USING btree
        ("client_id" COLLATE pg_catalog."default" ASC NULLS LAST);

CREATE TABLE IF NOT EXISTS api_scopes
(
    "id"   integer                                             NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "name" character varying(200) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "primary_key_api_scopes" PRIMARY KEY ("id")
);

CREATE UNIQUE INDEX IF NOT EXISTS "UI_api_scopes_name"
    ON api_scopes USING btree
        ("name" COLLATE pg_catalog."default" ASC NULLS LAST);


CREATE TABLE IF NOT EXISTS client_secrets
(
    "id"        integer                                              NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "client_id" integer                                              NOT NULL,
    "value"     character varying(4000) COLLATE pg_catalog."default" NOT NULL,
    "type"      character varying(250) COLLATE pg_catalog."default"  NOT NULL,
    CONSTRAINT "primary_key_client_secrets" PRIMARY KEY ("id"),
    CONSTRAINT "foreign_key_client_secrets_clients_client_id" FOREIGN KEY ("client_id")
        REFERENCES clients ("id") MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
);

CREATE INDEX IF NOT EXISTS "UI_client_secrets_id"
    ON client_secrets USING btree
        ("client_id" ASC NULLS LAST);

CREATE TABLE IF NOT EXISTS client_scopes
(
    "id"        integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "client_id" integer NOT NULL,
    "scope_id"  integer NOT NULL,
    CONSTRAINT "primary_key_client_scopes" PRIMARY KEY ("id"),
    CONSTRAINT "foreign_key_client_scopes_clients_client_id" FOREIGN KEY ("client_id")
        REFERENCES clients ("id") MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE,
    CONSTRAINT "foreign_key_client_scopes_api_scopes_id" FOREIGN KEY ("scope_id")
        REFERENCES api_scopes ("id") MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS api_resources
(
    "id"      integer                                             NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "name"    character varying(200) COLLATE pg_catalog."default" NOT NULL,
    "created" timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    "updated" timestamp without time zone,
    CONSTRAINT "primary_key_api_resources" PRIMARY KEY ("id")
);

CREATE UNIQUE INDEX IF NOT EXISTS "UI_api_resources_name"
    ON api_resources USING btree
        ("name" COLLATE pg_catalog."default" ASC NULLS LAST);

CREATE TABLE IF NOT EXISTS api_resource_scopes
(
    "id"              integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "api_resource_id" integer NOT NULL,
    "scope_id"        integer NOT NULL,
    CONSTRAINT "primary_key_api_resource_scopes" PRIMARY KEY ("id"),
    CONSTRAINT "foreign_key_api_resources_scopes_clients_client_id" FOREIGN KEY ("api_resource_id")
        REFERENCES api_resources ("id") MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE,
    CONSTRAINT "foreign_key_client_api_resources_scope_api_scopes_id" FOREIGN KEY ("scope_id")
        REFERENCES api_scopes ("id") MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
);
